#!/usr/bin/env python3
"""
Script auxiliar para configurar autom√°ticamente la base de datos de Notion
para el agente de noticias automatizado.

Este script crea una nueva base de datos en Notion con las propiedades
correctas para almacenar los art√≠culos procesados.
"""

import os
from notion_client import Client
from dotenv import load_dotenv
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Cargar variables de entorno
load_dotenv()

def setup_notion_database():
    """
    Crea una nueva base de datos en Notion con las propiedades necesarias
    para el agente de noticias.
    """
    try:
        # Verificar token de Notion
        notion_token = os.getenv('NOTION_TOKEN')
        if not notion_token:
            raise ValueError("NOTION_TOKEN no encontrado en variables de entorno")
        
        # Inicializar cliente de Notion
        notion = Client(auth=notion_token)
        
        # Obtener p√°gina padre (puedes cambiar esto por el ID de tu workspace o p√°gina)
        # Por defecto, usar√° tu workspace principal
        parent_page_id = None
        
        logger.info("Creando base de datos en Notion...")
        
        # Crear la base de datos
        database = notion.databases.create(
            parent={"type": "page_id", "page_id": parent_page_id} if parent_page_id else {"type": "workspace"},
            title=[
                {
                    "type": "text",
                    "text": {
                        "content": "üì∞ Art√≠culos de Noticias - Agente IA"
                    }
                }
            ],
            properties={
                "T√≠tulo del Art√≠culo": {
                    "title": {}
                },
                "URL": {
                    "url": {}
                },
                "Resumen IA": {
                    "rich_text": {}
                },
                "Fuente": {
                    "rich_text": {}
                },
                "Fecha de Procesamiento": {
                    "date": {}
                },
                "Estado": {
                    "select": {
                        "options": [
                            {
                                "name": "Nuevo",
                                "color": "blue"
                            },
                            {
                                "name": "Procesado",
                                "color": "green"
                            },
                            {
                                "name": "Error",
                                "color": "red"
                            }
                        ]
                    }
                }
            }
        )
        
        database_id = database['id']
        database_url = database['url']
        
        logger.info(f"‚úÖ Base de datos creada exitosamente!")
        logger.info(f"üìã ID de la base de datos: {database_id}")
        logger.info(f"üîó URL de la base de datos: {database_url}")
        logger.info("\nüìù A√±ade esta l√≠nea a tu archivo .env:")
        logger.info(f"NOTION_DATABASE_ID={database_id}")
        
        return database_id, database_url
        
    except Exception as e:
        logger.error(f"‚ùå Error al crear la base de datos: {e}")
        raise

def verify_database_structure(database_id):
    """
    Verifica que la base de datos tiene la estructura correcta.
    """
    try:
        notion_token = os.getenv('NOTION_TOKEN')
        notion = Client(auth=notion_token)
        
        # Obtener la base de datos
        database = notion.databases.retrieve(database_id)
        
        logger.info("üîç Verificando estructura de la base de datos...")
        
        # Verificar propiedades requeridas
        required_properties = [
            "T√≠tulo del Art√≠culo",
            "URL", 
            "Resumen IA",
            "Fuente"
        ]
        
        existing_properties = list(database['properties'].keys())
        
        missing_properties = []
        for prop in required_properties:
            if prop not in existing_properties:
                missing_properties.append(prop)
        
        if missing_properties:
            logger.warning(f"‚ö†Ô∏è Propiedades faltantes: {missing_properties}")
            return False
        else:
            logger.info("‚úÖ Todas las propiedades requeridas est√°n presentes")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå Error al verificar la base de datos: {e}")
        return False

def main():
    """
    Funci√≥n principal del script de configuraci√≥n.
    """
    logger.info("üöÄ Configurador de Base de Datos de Notion")
    logger.info("=" * 50)
    
    try:
        # Crear nueva base de datos
        database_id, database_url = setup_notion_database()
        
        # Verificar estructura
        if verify_database_structure(database_id):
            logger.info("\nüéâ Configuraci√≥n completada exitosamente!")
            logger.info("üìã Pr√≥ximos pasos:")
            logger.info("1. Copia el ID de la base de datos a tu archivo .env")
            logger.info("2. Ejecuta el agente de noticias: python news_agent.py")
        else:
            logger.error("‚ùå La base de datos no tiene la estructura correcta")
            
    except Exception as e:
        logger.error(f"‚ùå Error en la configuraci√≥n: {e}")
        logger.info("\nüí° Soluci√≥n de problemas:")
        logger.info("1. Verifica que tu NOTION_TOKEN es v√°lido")
        logger.info("2. Aseg√∫rate de que tu integraci√≥n tiene permisos de escritura")
        logger.info("3. Revisa los logs para m√°s detalles")

if __name__ == "__main__":
    main() 